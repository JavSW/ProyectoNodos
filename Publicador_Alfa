#include <mosquitto.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <wiringPi.h>
#include <wiringPiI2C.h>
#include <pthread.h>
#include <math.h>
#include <sys/time.h>
#include <wiringPiSPI.h>
#include <mcp3004.h>

#define LSM6DS33 0x6A
#define conversion 16
#define SPI_CHANNEL 0      // Canal SPI del MCP3004
#define CLOCK_SPEED 10000 // Velocidad del reloj SPI (1 MHz)
#define PIN_BASE 100        // Base de pines para mcp3004Setup
#define TABLE_ENTRIES 12    // Número de entradas en la tabla de interpolación
#define INTERVAL 400         
#define LSM6DS33_CTRL1_XL 0x10
#define LSM6DS33_CTRL2_G  0x11
#define LSM6DS33_OUTX_L_G 0x22
#define LSM6DS33_OUTY_L_G 0x24
#define LSM6DS33_OUTZ_L_G 0x26
#define LSM6DS33_OUTX_L_XL 0x28
#define LSM6DS33_OUTY_L_XL 0x2A
#define LSM6DS33_OUTZ_L_XL 0x2C
#define ALFA 0.2

static int distance[TABLE_ENTRIES] = {40, 30, 23, 16, 12, 10, 9, 8, 7, 6, 5, 4}; // Tabla de distancias en cm

struct AccelerometerData {
    short accelX;
    short accelY;
    short accelZ;
    short gyroX;
    short gyroY;
    short gyroZ;
    double pitch;
    double roll;
    double yaw;
};

// Variables globales
int lsm6ds33_fd;
int accelX_offset;
int accelY_offset;
int accelZ_offset;

struct ThreadData {
    struct mosquitto *mosq;
    int fd;
};

struct DistanceThreadData {
    struct mosquitto *mosq;
};

void setupLSM6DS33() {
    // Inicializar el bus I2C y obtener el descriptor de archivo
    lsm6ds33_fd = wiringPiI2CSetup(LSM6DS33);

    // Configurar el LSM6DS33
    wiringPiI2CWriteReg8(lsm6ds33_fd, LSM6DS33_CTRL1_XL, 0b01010001);
    wiringPiI2CWriteReg8(lsm6ds33_fd, LSM6DS33_CTRL2_G, 0b01010001);
}

void readSensorData(struct AccelerometerData *accelData) {
    short antX = 0, antY = 0, antZ = 0;

    while (1) {
        unsigned int now = millis();

        // Leer datos del acelerómetro
        short accelX = wiringPiI2CReadReg16(lsm6ds33_fd, 0x28) - accelX_offset;
        short accelY = wiringPiI2CReadReg16(lsm6ds33_fd, 0x2A) - accelY_offset;
        short accelZ = wiringPiI2CReadReg16(lsm6ds33_fd, 0x2C) - accelZ_offset;

        short ValX = ALFA * accelX + (1 - ALFA) * antX;
        short ValY = ALFA * accelY + (1 - ALFA) * antY;
        short ValZ = ALFA * accelZ + (1 - ALFA) * antZ;
        antX = ValX;
        antY = ValY;
        antZ = ValZ;

        // Leer datos del giroscopio
        short gyroX = wiringPiI2CReadReg16(lsm6ds33_fd, 0x22);
        short gyroY = wiringPiI2CReadReg16(lsm6ds33_fd, 0x24);
        short gyroZ = wiringPiI2CReadReg16(lsm6ds33_fd, 0x26);

        // Calcular ángulos de orientación
        double A = sqrt((double)(ValX * ValX + ValY * ValY + ValZ * ValZ));
        double ValNX = (double)ValX / A;
        double ValNY = (double)ValY / A;
        double ValNZ = (double)ValZ / A;
        double pitch = atan(ValNX / (sqrt(ValNY * ValNY + ValNZ * ValNZ))) * (180.0 / M_PI);
        double roll = atan(ValNY / (sqrt(ValNX * ValNX + ValNZ * ValNZ))) * (180.0 / M_PI);
        double yaw = atan(ValNZ / (sqrt(ValNX * ValNX + ValNY * ValNY))) * (180.0 / M_PI);

        // Almacenar datos en la estructura
        accelData->accelX = ValX;
        accelData->accelY = ValY;
        accelData->accelZ = ValZ;
        accelData->gyroX = gyroX;
        accelData->gyroY = gyroY;
        accelData->gyroZ = gyroZ;
        accelData->pitch = pitch;
        accelData->roll = roll;
        accelData->yaw = yaw;

        // Imprimir datos si es necesario
        printf("Acelerómetro: X=%d, Y=%d, Z=%d\n", ValX, ValY, ValZ);
        printf("Giroscopio: X=%d, Y=%d, Z=%d\n", gyroX, gyroY, gyroZ);
        printf("Pitch=%f,  Roll=%f, Yaw=%f\n", pitch, roll, yaw);

        unsigned int after = millis();
        int time_passed = after - now;
        if (time_passed < 1000) {
            delay(1000 - time_passed);
        }
    }
}

void on_connect(struct mosquitto *mosq, void *obj, int reason_code) {
    printf("on_connect: %s\n", mosquitto_connack_string(reason_code));
    if (reason_code != 0) {
        mosquitto_disconnect(mosq);
    }
}

void on_publish(struct mosquitto *mosq, void *obj, int mid) {
    printf("Message with mid %d has been published.\n", mid);
}

int getDistance(int mV) {
    if (mV > INTERVAL * (TABLE_ENTRIES - 1)) {
        return distance[TABLE_ENTRIES - 1];
    } else {
        int index = mV / INTERVAL;
        float frac = (mV % INTERVAL) / (float)INTERVAL;
        return distance[index] - ((distance[index] - distance[index + 1]) * frac);
    }
}

void *publish_accel_thread(void *data) {
    struct ThreadData *thread_data = (struct ThreadData *)data;

    while (1) {
        char payload[100];
        struct AccelerometerData accelData;
        int rc;

        // Leer datos del acelerómetro y giroscopio y almacenarlos en la estructura
        readSensorData(&accelData);

        // Crear el payload con los datos del acelerómetro
        snprintf(payload, sizeof(payload), "AccelX=%d, AccelY=%d, AccelZ=%d, GyroX=%d, GyroY=%d, GyroZ=%d, Pitch=%f, Roll=%f, Yaw=%f",
                 accelData.accelX, accelData.accelY, accelData.accelZ,
                 accelData.gyroX, accelData.gyroY, accelData.gyroZ,
                 accelData.pitch, accelData.roll, accelData.yaw);

        // Publicar en el tema
        rc = mosquitto_publish(thread_data->mosq, NULL, "Rpi/acceleration", strlen(payload), payload, 2, false);
        if (rc != MOSQ_ERR_SUCCESS) {
            fprintf(stderr, "Error publishing: %s\n", mosquitto_strerror(rc));
        }

        // Ajustar el retraso según sea necesario
        delay(1000);
    }

    return NULL;
}

void *publish_distance_thread(void *data) {
    struct DistanceThreadData *distance_data = (struct DistanceThreadData *)data;

    while (1) {
        char payload[20];
        int val, mV, cm;
        int rc;

        // Leer valores de distancia
        val = analogRead(PIN_BASE);
        mV = (val * 3300) / 1023;
        cm = getDistance(mV);

        // Crear el payload con los datos de distancia
        snprintf(payload, sizeof(payload), "%d", cm);
        printf("Distancia: %d cm\n", cm);

        // Publicar en el tema
        rc = mosquitto_publish(distance_data->mosq, NULL, "Rpi/distance", strlen(payload), payload, 2, false);
        if (rc != MOSQ_ERR_SUCCESS) {
            fprintf(stderr, "Error publishing: %s\n", mosquitto_strerror(rc));
        }

        // Ajustar el retraso según sea necesario
        delay(100);
    }

    return NULL;
}

int main() {
    struct mosquitto *mosq;
    int rc;
    pthread_t accel_thread_id, distance_thread_id;

    if (wiringPiSetup() == -1) {
        fprintf(stderr, "Error al inicializar WiringPi\n");
        return 1;
    }

    if (wiringPiSPISetup(SPI_CHANNEL, CLOCK_SPEED) == -1) {
        fprintf(stderr, "Error al inicializar SPI\n");
        return 1;
    }

    mcp3004Setup(PIN_BASE, SPI_CHANNEL);

    mosquitto_lib_init();

    mosq = mosquitto_new(NULL, true, NULL);
    if (mosq == NULL) {
        fprintf(stderr, "Error: Fuera de memoria.\n");
        return 1;
    }

    mosquitto_connect_callback_set(mosq, on_connect);
    mosquitto_publish_callback_set(mosq, on_publish);

    rc = mosquitto_connect(mosq, "test.mosquitto.org", 1883, 60);
    if (rc != MOSQ_ERR_SUCCESS) {
        mosquitto_destroy(mosq);
        fprintf(stderr, "Error: %s\n", mosquitto_strerror(rc));
        return 1;
    }

    rc = mosquitto_loop_start(mosq);
    if (rc != MOSQ_ERR_SUCCESS) {
        mosquitto_destroy(mosq);
        fprintf(stderr, "Error: %s\n", mosquitto_strerror(rc));
        return 1;
    }

    // Configurar el LSM6DS33
    setupLSM6DS33();

    struct ThreadData accel_thread_data = {mosq, lsm6ds33_fd};
    struct DistanceThreadData distance_thread_data = {mosq};

    // Crear hilos
    pthread_create(&accel_thread_id, NULL, publish_accel_thread, (void *)&accel_thread_data);
    pthread_create(&distance_thread_id, NULL, publish_distance_thread, (void *)&distance_thread_data);

    // Esperar a que los hilos terminen
    pthread_join(accel_thread_id, NULL);
    pthread_join(distance_thread_id, NULL);

    mosquitto_lib_cleanup();
    return 0;
}
